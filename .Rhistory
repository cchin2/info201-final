filter(area != "NA")
forest_wide$area <- round(as.numeric(format(forest_wide$area, scientific = F)), 0)
forest_wide <- spread(forest_wide,
key = Series.Name,
value = area
)
# Delete symbols of () and % in column names, replacing them with names including _
colnames(forest_wide)[4] <- "Agricultural_land_percentage"
colnames(forest_wide)[5] <- "Agricultural_land_sqaure_km"
colnames(forest_wide)[6] <- "Co2_emissions_kt"
colnames(forest_wide)[7] <- "Co2_emissions_metric_tons_per_capita"
colnames(forest_wide)[8] <- "Forest_area_percentage"
colnames(forest_wide)[9] <- "Forest_area_square_km"
colnames(forest_wide)[10] <- "GDP_2010_USD"
feature <- colnames(forest_wide)[4:10]
# Put two widget controls into ui, one dropdown box and one text input
my_ui <- fluidPage(
titlePanel("Forestation Level"),
selectInput(
inputId = "feature", label = "Feature of Interest",
choices = feature, selected = "Forest_area_percentage"
),
textInput(
inputId = "year", label = "Year of Interest (1992-2016)",
value = "1992"
),
dataTableOutput(outputId = "data_table"),
textOutput(outputId = "message"),
plotOutput(outputId = "plot"),
textOutput(outputId = "message2")
)
# Define my_server function, render outputs from it
my_server <- function(input, output) {
output$data_table <- renderDataTable({
filtered_forest <- forest_wide %>%
filter(year == input$year) %>%
select(Country.Name, year, input$feature)
filtered_forest
})
output$message <- renderText({
message_str <- paste(
"The table shows the ", input$feature,
"for ", input$year
)
message_str
})
output$plot <- renderPlot({
ggplot(data = forest_wide) +
geom_smooth(mapping = aes_string(x = input$feature, y = "Forest_area_percentage")) +
scale_x_log10()
})
output$message2 <- renderText({
message_str2 <- paste(
"The plot shows the relationship between Forest area (% of land area) and ",
input$feature, "in ", input$year
)
})
}
# Start running the application
shinyApp(my_ui, my_server)
my_server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = correct_colnames_numeric) +
geom_point(mapping = aes_string(
x = input$choice_x,
y = "CO2",
label = "correct_colnames_numeric$State")
)
})
}
shinyApp(ui = my_ui, server = my_server)
library("dplyr")
library("tidyr")
library("shiny")
library("ggplot2")
### references ###
# https://www.eia.gov/environment/emissions/state/analysis/
# https://www.eia.gov/state/seds/seds-data-complete.php?sid=US#Production
biofuel <- read.csv("data/biofuel.csv", stringsAsFactors = FALSE)
co2 <- read.csv("data/co2.csv", stringsAsFactors = FALSE)
co2_per_capita <- read.csv("data/co2_per_capita.csv", stringsAsFactors = FALSE)
crude_oil <- read.csv("data/crude_oil.csv", stringsAsFactors = FALSE)
fuel_ethanol <- read.csv("data/fuel_ethanol.csv", stringsAsFactors = FALSE)
natural_gas <- read.csv("data/natural_gas.csv", stringsAsFactors = FALSE)
# data wrangling
# Change all the state column names to "State"
state_colname <- function (data) {
colnames(data)[1] = "State"
return(data)
}
co2 <- state_colname(co2)
biofuel <- state_colname(biofuel)
co2_per_capita <- state_colname(co2_per_capita)
crude_oil <- state_colname(crude_oil)
fuel_ethanol <- state_colname(fuel_ethanol)
# Select only 2016 values
co2 <- select(co2, State, X2016)
colnames(co2) <- c("State", "co2")
# combine all of the csv files by State where they all have matching values
combined <- inner_join(biofuel, crude_oil, by = "State") %>%
inner_join(., fuel_ethanol, by = "State") %>%
inner_join(., natural_gas, by = "State") %>%
inner_join(., co2_per_capita, by = "State") %>%
inner_join(., co2, by = "State")
# remove all of the commas in number and change the values to be numeric
correct_colnames_numeric <- combined
colnames(correct_colnames_numeric) <- c("State", "BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas", "CO2_Per_Capita", "CO2")
correct_colnames_numeric$Crude_Oil <- gsub(",", "", correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$Crude_Oil<- as.numeric(correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$BioFuel <- as.numeric(correct_colnames_numeric$BioFuel)
correct_colnames_numeric$Fuel_Ethanol <- gsub(",", "", correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Fuel_Ethanol <- as.numeric(correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Natural_Gas <- gsub(",", "", correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$Natural_Gas <- as.numeric(correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$CO2_Per_Capita <- as.numeric(correct_colnames_numeric$CO2_Per_Capita)
correct_colnames_numeric$CO2 <- as.numeric(correct_colnames_numeric$CO2)
View(correct_colnames_numeric)
my_ui <- fluidPage(
#shows the widgets
sidebarLayout(
sidebarPanel(
selectInput(inputId = "choice_x",
label = "X Variable",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "Crude_Oil")
),
#shows the result from the widgets in tabs
mainPanel(
plotOutput(outputId = "plot")
)
)
)
my_server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = correct_colnames_numeric) +
geom_point(mapping = aes_string(
x = input$choice_x,
y = "CO2",
label = "correct_colnames_numeric$State")
)
})
}
shinyApp(ui = my_ui, server = my_server)
library("dplyr")
library("tidyr")
library("shiny")
library("ggplot2")
### references ###
# https://www.eia.gov/environment/emissions/state/analysis/
# https://www.eia.gov/state/seds/seds-data-complete.php?sid=US#Production
biofuel <- read.csv("data/biofuel.csv", stringsAsFactors = FALSE)
co2 <- read.csv("data/co2.csv", stringsAsFactors = FALSE)
co2_per_capita <- read.csv("data/co2_per_capita.csv", stringsAsFactors = FALSE)
crude_oil <- read.csv("data/crude_oil.csv", stringsAsFactors = FALSE)
fuel_ethanol <- read.csv("data/fuel_ethanol.csv", stringsAsFactors = FALSE)
natural_gas <- read.csv("data/natural_gas.csv", stringsAsFactors = FALSE)
# data wrangling
# Change all the state column names to "State"
state_colname <- function (data) {
colnames(data)[1] = "State"
return(data)
}
co2 <- state_colname(co2)
biofuel <- state_colname(biofuel)
co2_per_capita <- state_colname(co2_per_capita)
crude_oil <- state_colname(crude_oil)
fuel_ethanol <- state_colname(fuel_ethanol)
# Select only 2016 values
co2 <- select(co2, State, X2016)
colnames(co2) <- c("State", "co2")
# combine all of the csv files by State where they all have matching values
combined <- inner_join(biofuel, crude_oil, by = "State") %>%
inner_join(., fuel_ethanol, by = "State") %>%
inner_join(., natural_gas, by = "State") %>%
inner_join(., co2_per_capita, by = "State") %>%
inner_join(., co2, by = "State")
# remove all of the commas in number and change the values to be numeric
correct_colnames_numeric <- combined
colnames(correct_colnames_numeric) <- c("State", "BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas", "CO2_Per_Capita", "CO2")
correct_colnames_numeric$Crude_Oil <- gsub(",", "", correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$Crude_Oil<- as.numeric(correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$BioFuel <- as.numeric(correct_colnames_numeric$BioFuel)
correct_colnames_numeric$Fuel_Ethanol <- gsub(",", "", correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Fuel_Ethanol <- as.numeric(correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Natural_Gas <- gsub(",", "", correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$Natural_Gas <- as.numeric(correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$CO2_Per_Capita <- as.numeric(correct_colnames_numeric$CO2_Per_Capita)
correct_colnames_numeric$CO2 <- as.numeric(correct_colnames_numeric$CO2)
View(correct_colnames_numeric)
my_ui <- fluidPage(
#shows the widgets
sidebarLayout(
sidebarPanel(
selectInput(inputId = "choice_x",
label = "X Variable",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "Crude_Oil")
),
#shows the result from the widgets in tabs
mainPanel(
plotOutput(outputId = "plot")
)
)
)
my_server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = correct_colnames_numeric) +
geom_point(mapping = aes_string(
x = input$choice_x,
y = "CO2",
label = "correct_colnames_numeric$State")
)
})
}
shinyApp(ui = my_ui, server = my_server)
setwd("C:/Users/hp/Desktop/INFO 201/info201-final")
library("dplyr")
library("tidyr")
library("shiny")
library("ggplot2")
### references ###
# https://www.eia.gov/environment/emissions/state/analysis/
# https://www.eia.gov/state/seds/seds-data-complete.php?sid=US#Production
biofuel <- read.csv("data/biofuel.csv", stringsAsFactors = FALSE)
co2 <- read.csv("data/co2.csv", stringsAsFactors = FALSE)
co2_per_capita <- read.csv("data/co2_per_capita.csv", stringsAsFactors = FALSE)
crude_oil <- read.csv("data/crude_oil.csv", stringsAsFactors = FALSE)
fuel_ethanol <- read.csv("data/fuel_ethanol.csv", stringsAsFactors = FALSE)
natural_gas <- read.csv("data/natural_gas.csv", stringsAsFactors = FALSE)
# data wrangling
# Change all the state column names to "State"
state_colname <- function (data) {
colnames(data)[1] = "State"
return(data)
}
co2 <- state_colname(co2)
biofuel <- state_colname(biofuel)
co2_per_capita <- state_colname(co2_per_capita)
crude_oil <- state_colname(crude_oil)
fuel_ethanol <- state_colname(fuel_ethanol)
# Select only 2016 values
co2 <- select(co2, State, X2016)
colnames(co2) <- c("State", "co2")
# combine all of the csv files by State where they all have matching values
combined <- inner_join(biofuel, crude_oil, by = "State") %>%
inner_join(., fuel_ethanol, by = "State") %>%
inner_join(., natural_gas, by = "State") %>%
inner_join(., co2_per_capita, by = "State") %>%
inner_join(., co2, by = "State")
# remove all of the commas in number and change the values to be numeric
correct_colnames_numeric <- combined
colnames(correct_colnames_numeric) <- c("State", "BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas", "CO2_Per_Capita", "CO2")
correct_colnames_numeric$Crude_Oil <- gsub(",", "", correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$Crude_Oil<- as.numeric(correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$BioFuel <- as.numeric(correct_colnames_numeric$BioFuel)
correct_colnames_numeric$Fuel_Ethanol <- gsub(",", "", correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Fuel_Ethanol <- as.numeric(correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Natural_Gas <- gsub(",", "", correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$Natural_Gas <- as.numeric(correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$CO2_Per_Capita <- as.numeric(correct_colnames_numeric$CO2_Per_Capita)
correct_colnames_numeric$CO2 <- as.numeric(correct_colnames_numeric$CO2)
View(correct_colnames_numeric)
my_ui <- fluidPage(
#shows the widgets
sidebarLayout(
sidebarPanel(
selectInput(inputId = "choice_x",
label = "X Variable",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "Crude_Oil")
),
#shows the result from the widgets in tabs
mainPanel(
plotOutput(outputId = "plot")
)
)
)
my_server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = correct_colnames_numeric) +
geom_point(mapping = aes_string(
x = input$choice_x,
y = "CO2",
label = "correct_colnames_numeric$State")
)
})
}
shinyApp(ui = my_ui, server = my_server)
setwd("C:/Users/hp/Desktop/INFO 201/info201-final")
source("data_wrangling.R")
page_one <- tabPanel(
"Crude Oil",
p(strong("Defintion:"), "most common form of fossil fuel made of a mixture of hydrocarbons, found in underground reservoirs."),
p(strong("Units:"), "thousands of barrels ")
)
page_two <- tabPanel(
"Natural Gas",
p(strong("Defintion:"), "naturally occurring gas made of primarily of methane and other hydrocarbons, found in natural gas
deposits made from hydrocarbons being heated/pressurized into gas."),
p(strong("Units:"), "millions of cubic feet")
)
page_three <- tabPanel(
"Fuel Ethanol",
p(strong("Defintion:"), "a renewable fuel that is commonly domestically produced or fermented from agricultural waste,
grain or corn. Ethanol fuel is also produced in a chemical extraction from ethylene (via hydration)."),
p(strong("Units:"), "thousand barrels")
)
page_four <- tabPanel(
"Biofuel",
p(strong("Defintion:"), "a renewable fuel that is produced through contemporary biological processes, such as agriculture and anaerobic
digestion"),
p(strong("Units:"), "trillion btu")
)
page_five <- tabPanel(
"CO2",
p(strong("Defintion:"), "a colorless gas made with one carbon atom and two oxygen atoms."),
p(strong("Units:"), "million metric tons"),
p(strong("CO2 per capita:"), "metric tons of carbon dioxide per person.")
)
page_six <- tabPanel(
"Renewable",
p(strong("Renewable"), "energy is generally defined as energy that is collected from resources which are naturally replenished on a human timescale,
such as sunlight, wind, rain, tides, waves, and geothermal heat.")
)
page_seven <- tabPanel(
"Nonrenewable",
p("A ", strong("non-renewable"), " resource (also called a finite resource) is a resource that does not renew itself at a sufficient rate for sustainable
economic extraction in meaningful human time-frames. ")
)
my_ui <- fluidPage(
titlePanel("Energy Sources and CO2 in the United States"),
h5(strong("Our project is focused on the different production levels of energy sources in the United States.
These are used for energy in everyday life such as the gas for transportation and heating systems.
Some of these energy sources include crude oil, natural gas, biofuel, and ethanol. While these serve
similar purposes, they are different in their impacts on the environment. There are two main factors
that one should consider with these different options: cost and impact. For example, one key
difference is that crude oil releases a significant amount of carbon dioxide into the atmosphere.
Compared to natural gas, that is about 30% more carbon dioxide produced. The other is that crude oil
is considered cheaper than natural gas, giving reason to why most commercial cars are designed to use crude
oil. These two fuel options are better than burning coal but are still causes of significant air pollution and
are nonrenewable. We will also be examining renewable energy sources like biofuel and ethanol.  ")),
navbarPage(
"Definitions",
page_one,
page_two,
page_three,
page_four,
page_five,
page_six,
page_seven
),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "choice_x", label = "X Varaible",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "Crude_Oil"
),
selectInput(
inputId = "choice_y", label = "Y Variable",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "BioFuel"
),
radioButtons(inputId = "points_text", label = "Would you like to view points or see state names?",
choices = list("States" = 1, "Points" = 2),
selected = 1)
),
mainPanel(
plotOutput(outputId = "table2")
)
)
)
my_server <- function(input, output) {
# Question 1 table
output$table2 <- renderPlot({
ggplot(data = correct_colnames_numeric) +
if (input$points_text == 1) {
geom_label(mapping = aes_string(
x = input$choice_x, y = input$choice_y,
label = "correct_colnames_numeric$State"
))
} else {
geom_point(mapping = aes_string(
x = input$choice_x, y = input$choice_y
))
}
})
}
source("cam_ui.R")
shinyApp(ui = my_ui , server = my_server)
setwd("C:/Users/hp/Desktop/INFO 201/info201-final")
library("dplyr")
library("tidyr")
library("shiny")
library("ggplot2")
### references ###
# https://www.eia.gov/environment/emissions/state/analysis/
# https://www.eia.gov/state/seds/seds-data-complete.php?sid=US#Production
biofuel <- read.csv("data/biofuel.csv", stringsAsFactors = FALSE)
co2 <- read.csv("data/co2.csv", stringsAsFactors = FALSE)
co2_per_capita <- read.csv("data/co2_per_capita.csv", stringsAsFactors = FALSE)
crude_oil <- read.csv("data/crude_oil.csv", stringsAsFactors = FALSE)
fuel_ethanol <- read.csv("data/fuel_ethanol.csv", stringsAsFactors = FALSE)
natural_gas <- read.csv("data/natural_gas.csv", stringsAsFactors = FALSE)
# data wrangling
# Change all the state column names to "State"
state_colname <- function (data) {
colnames(data)[1] = "State"
return(data)
}
co2 <- state_colname(co2)
biofuel <- state_colname(biofuel)
co2_per_capita <- state_colname(co2_per_capita)
crude_oil <- state_colname(crude_oil)
fuel_ethanol <- state_colname(fuel_ethanol)
# Select only 2016 values
co2 <- select(co2, State, X2016)
colnames(co2) <- c("State", "co2")
# combine all of the csv files by State where they all have matching values
combined <- inner_join(biofuel, crude_oil, by = "State") %>%
inner_join(., fuel_ethanol, by = "State") %>%
inner_join(., natural_gas, by = "State") %>%
inner_join(., co2_per_capita, by = "State") %>%
inner_join(., co2, by = "State")
# remove all of the commas in number and change the values to be numeric
correct_colnames_numeric <- combined
colnames(correct_colnames_numeric) <- c("State", "BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas", "CO2_Per_Capita", "CO2")
correct_colnames_numeric$Crude_Oil <- gsub(",", "", correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$Crude_Oil<- as.numeric(correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$BioFuel <- as.numeric(correct_colnames_numeric$BioFuel)
correct_colnames_numeric$Fuel_Ethanol <- gsub(",", "", correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Fuel_Ethanol <- as.numeric(correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Natural_Gas <- gsub(",", "", correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$Natural_Gas <- as.numeric(correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$CO2_Per_Capita <- as.numeric(correct_colnames_numeric$CO2_Per_Capita)
correct_colnames_numeric$CO2 <- as.numeric(correct_colnames_numeric$CO2)
View(correct_colnames_numeric)
my_ui <- fluidPage(
#shows the widgets
sidebarLayout(
sidebarPanel(
selectInput(inputId = "choice_x",
label = "X Variable",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "Crude_Oil")
),
radioButtons(inputId = "points_text", label = "Would you like to view points or see state names?",
choices = list("States" = 1, "Points" = 2),
selected = 1)
),
#shows the result from the widgets in tabs
mainPanel(
plotOutput(outputId = "plot")
)
)
my_server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = correct_colnames_numeric) +
if (input$points_text == 1) {
geom_label(mapping = aes_string(
x = input$choice_x, y = "CO2",
label = "correct_colnames_numeric$State"
))
} else {
geom_point(mapping = aes_string(
x = input$choice_x, y = "CO2"
))
}
})
}
shinyApp(ui = my_ui, server = my_server)
my_ui <- fluidPage(
#shows the widgets
sidebarLayout(
sidebarPanel(
selectInput(inputId = "choice_x",
label = "X Variable",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "Crude_Oil")
),
radioButtons(inputId = "points_text", label = "Would you like to view points or see state names?",
choices = list("States" = 1, "Points" = 2),
selected = 1)
),
#shows the result from the widgets in tabs
mainPanel(
plotOutput(outputId = "plot"),
textOutput(outputId = "message")
)
)
my_server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = correct_colnames_numeric) +
if (input$points_text == 1) {
geom_label(mapping = aes_string(
x = input$choice_x, y = "CO2",
label = "correct_colnames_numeric$State"
))
} else {
geom_point(mapping = aes_string(
x = input$choice_x, y = "CO2"
))
}
})
output$message <- renderText({
message <- paste(
"The plot shows the relationship between CO2 emission and ",
input$choice_x, "of twenty states in 2016 "
)
})
}
shinyApp(ui = my_ui, server = my_server)
