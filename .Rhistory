# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes)
# Filter the data set for vehicles manufactured in 1997
vehicles$year[vehicles$year == 1998]
# Filter the data set for vehicles manufactured in 1997
vehicles$year[vehicles$year == 1997]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehilces$hwy[vehicles$year == 1997])
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles$hwy[vehicles$year == 1997])
# Filter the data set for vehicles manufactured in 1997
vehicles$year[vehicles$year == 1997, ]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles$hwy[vehicles$year == 1997, ])
install.packages("dplyr")
library("dplyr")
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles$hwy[vehicles$year == 1997])
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles[vehicles$year == 1997, ]$hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles[vehicles$year == 1997, ][, hwy])
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles[vehicles$year == 1997, ][, "hwy"])
# Filter the data set for vehicles manufactured in 1997
new_var <- vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(new_var[ ,"hwy"])
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(new_var)
print(new_var)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(new_var$hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
new_var[order(new_var$hwy, ])
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
new_var[order(new_var$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(
vehicles,
average = (vehicles$hwy + vehicles$cty) / 2
)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(
vehicles,
average = (vehicles$hwy + vehicles$cty) / 2
)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(car_1997, hwy)
# Filter the data set for vehicles manufactured in 1997
car_1997 <- filter(vehicles, year == 1997)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(makes)
# Filter the data set for vehicles manufactured in 1997
car_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(car_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
car_1997 <- mutate(
car_1997,
average = mean(hwy, city)
)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg4) for each car
vehicles$average = (vehicles$hwy + vehicles$cty) / 2
View(vehicles)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
car_1997 <- mutate(
car_1997,
average = (city + hwy) / 2
)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
car_1997 <- mutate(
car_1997,
average = (cty + hwy) / 2
)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicle, drive == "2-Wheel Drive", city = 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive == "2-Wheel Drive", city = 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
cars_1997_2ed <- filter(vehicles, drive == "2-Wheel Drive", city == 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
cars_1997_2ed <- filter(vehicles, drive == "2-Wheel Drive", cty == 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(
filter(
cars_1997_2ed,
hwy == min(hwy)
),
id
)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd_20gm <- vehicles[ ,vehicles$drive == "2-Wheel Drive"]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd_20gm <- vehicles[ ,vehicles$drive == "2-Wheel Drive"]
# Filter the data set for vehicles manufactured in 1997
new_var <- vehicles[vehicles$year == 1997, ]
print(new_var)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd_20gm <- vehicles[ , vehicles$drive == "2-Wheel Drive"]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd_20gm <- vehicles[vehicles$drive == "2-Wheel Drive", ]
print(vehicles_2wd_20gm)
vehicles_2wd_20gm <- vehicles_2wd[vehicles$cty > 20, ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd <- vehicles[vehicles$drive == "2-Wheel Drive", ]
vehicles_2wd_20gm <- vehicles_2wd[vehicles$cty > 20, ]
print(vehicles_2wd_20gm)
vehicles_2wd_20gm <- vehicles_2wd[vehicles$cty < 20, ]
print(vehicles_2wd_20gm)
vehicles_2wd_20gm <- vehicles_2wd[vehicles$cty > 20, ]
print(vehicles_2wd_20gm)
vehicles_2wd_20gm <- vehicles_2wd[vehicles$cty > 20, ]
vehicles_2wd_20gm <- vehicles_2wd[vehicles$cty == 20, ]
vehicles_2wd_20gm <- vehicles_2wd[vehicles$cty > "20", ]
# What was the most efficient Honda model of 1995?
find_car(1995, "Honda")
find_car <- function(year_choice, make_choice) {
}
# Question 1
life_expectancy <- read.csv("data/life_expectancy.csv", stringsAsFactors = FALSE)
# Question 2
life_expectancy$change <- life_expectancy$le_2013 - life_expectancy$le_1960
# Question 1
life_expectancy <- read.csv("data/life_expectancy.csv", stringsAsFactors = FALSE)
# Question 1
names <- c("Ayan", "Anukriti", "Alvin", "Naveen", "Andrey", "Kiran")
# Question 2
math_grades <- runif(6, 0, 100)
# Question 3
spanish_grades <- runif(6, 0, 100)
# Question 4
tas <- data.frame(names, math_grades, spanish_grades, stringsAsFactors = FALSE)
View(tas)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_vehicle <- vehicles_2wd_20gm[max(vehicles_2wd_20gm$hwy)]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_vehicle <- vehicles_2wd_20gm[max(vehicles_2wd_20gm$hwy), ]
print(worst_vehicle)
print(vehicles_2wd_20gm)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_vehicle <- vehicles_2wd_20gm$hwy
print(worst_vehicle)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_vehicle <- vehicles_2wd_20gm$hwy
print(worst_vehicle)
print(vehicles_2wd_20gm)
is.data.frame((vehicles_2wd_20gm))
vehicles_2wd_20gm[vehicles_2wd_20gm$hwy, ]
print(worst_vehicle)
install.packages("ggplot2")
library("ggplot2")
View(midwest)
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = peradultpoverty))
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty))
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
install.packages("ggplot2")
library("ggplot2")
View(midwest)
library("ggplot2")
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
ggplot(data = midwest) +
geom_pointmapping = aes(
x = percollege,
y = percadultpoverty,
color = state
)
ggplot(data = midwest) +
geom_pointmapping = aes(
x = percollege,
y = percadultpoverty,
color = state
)
ggplot(data = midwest) +
geom_point(mapping = aes(
x = percollege,
y = percadultpoverty,
color = state
)
)
library("dplyr")
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
nrow(diamonds_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = "blue"))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = carat, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = carat, size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample, geom_line(mapping = aes(x = carat, y = price, color = cut)) +
geom_smooth())
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample, mapping = aes(x = carat, y = price, color = cut) +
geom_line()
geom_smooth())
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample, mapping = aes(x = carat, y = price, color = cut) +
geom_line()
geom_smooth())
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample) + geom_smooth(mapping = aes(x = carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample) + geom_smooth(mapping = aes(x = carat, y = price))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, will_fill = clarity))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, color = clarity))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "fill")
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "dodge")
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
ggplot(data = diamons) +
geom_point(mapping = aes(x = cut, y = clarity))
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity))
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = clarity, position = "jitter"))
geom_point(mapping = aes(x = cut, y = clarity, position_jitter())
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(data = diamonds_sample) +
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = clarity, position_jitter()))
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = clarity), position = "jitter")
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price),
scale_y_log10())
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price),
scale_y_log10())
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price) +
scale_y_log10())
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(data = diamonds_sample) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
library("dplyr")
library("tidyr")
biofuel <- read.csv("data/biofuel.csv", stringsAsFactors = FALSE)
co2 <- read.csv("data/co2.csv", stringsAsFactors = FALSE)
setwd("~/info201-final")
biofuel <- read.csv("data/biofuel.csv", stringsAsFactors = FALSE)
co2 <- read.csv("data/co2.csv", stringsAsFactors = FALSE)
co2_per_capita <- read.csv("data/co2_per_capita.csv", stringsAsFactors = FALSE)
crude_oil <- read.csv("data/crude_oil.csv", stringsAsFactors = FALSE)
fuel_ethanol <- read.csv("data/fuel_ethanol.csv", stringsAsFactors = FALSE)
natural_gas <- read.csv("data/natural_gas.csv", stringsAsFactors = FALSE)
# data wrangling
# select only 2016 values
co2 <- select(co2, ï..State, X2016)
colnames(co2) <- c("ï..State", "co2")
co2_per_capita <- select(co2_per_capita, ï..State, X2016)
colnames(co2_per_capita) <- c("ï..State", "co2_per_capita")
combined <- inner_join(biofuel, crude_oil, by = "ï..State") %>%
inner_join(., fuel_ethanol, by = "ï..State") %>%
inner_join(., natural_gas, by = c("ï..State" = "State")) %>%
inner_join(., co2_per_capita, by = "ï..State") %>%
inner_join(., co2, by = "ï..State")
colnames(combined)[1] <- "State"
View(combined)
source("my_ui.R")
library("shiny")
source("my_ui.R")
source("my_server.R")
biofuel <- read.csv("data/biofuel.csv", stringsAsFactors = FALSE)
co2 <- read.csv("data/co2.csv", stringsAsFactors = FALSE)
co2_per_capita <- read.csv("data/co2_per_capita.csv", stringsAsFactors = FALSE)
crude_oil <- read.csv("data/crude_oil.csv", stringsAsFactors = FALSE)
fuel_ethanol <- read.csv("data/fuel_ethanol.csv", stringsAsFactors = FALSE)
natural_gas <- read.csv("data/natural_gas.csv", stringsAsFactors = FALSE)
View(biofuel)
View(co2)
View(co2_per_capita)
View(crude_oil)
View(fuel_ethanol)
View(natural_gas)
colnames(data)[1] = "State"
colnames(data)[[1] = "State"
}
co2 <- select(co2, ï..State, X2016)
colnames(co2) <- c("ï..State", "co2")
co2_per_capita <- select(co2_per_capita, ï..State, X2016)
colnames(co2_per_capita) <- c("ï..State", "co2_per_capita")
combined <- inner_join(biofuel, crude_oil, by = "ï..State") %>%
inner_join(., fuel_ethanol, by = "ï..State") %>%
inner_join(., natural_gas, by = c("ï..State" = "State")) %>%
inner_join(., co2_per_capita, by = "ï..State") %>%
inner_join(., co2, by = "ï..State")
colnames(combined)[1] <- "State"
state_colname <- function (data) {
colnames(data)[[1]] = "State"
co2 <- state_colname(co2)
return(data)
state_colname <- function (data) {
colnames(data)[[1]] = "State"
return(data)
}
co2 <- state_colname(co2)
View(co2)
View(co2)
View(co2)
colnames(data)[1] = "State"
return(data)
state_colname <- function (data) {
colnames(data)[1] = "State"
return(data)
}
co2 <- state_colname(co2)
View(co2)
View(co2)
View(co2_per_capita)
View(co2_per_capita)
View(co2)
