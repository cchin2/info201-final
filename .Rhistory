}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), lapply(as.Date(),(birthdays_2019)))
print (bday_announcements)
#################
#### PART 1 #####
#################
my_age <- 20
my_name <- "Chaichinda Siritantitam"
#this function will take in parameters and put it in between sentences
make_introduction <- function (name, age){
(output1 <- paste("Hello, my name is ", " and I'm ", sep = name))
(output2 <- paste(age, " years old."))
return (finalOutput <- paste(output1, output2))
}
#set my_intro variable to use the function
my_intro <- make_introduction (my_name, my_age)
print (my_intro)
#subtitude another title with the original title in my_intro
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- toupper(my_intro)
#count how many e are there in the string
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
#create a vector of my favourite books
books <- c("Harry Potter", "The LOTR", "And then there were none", "Murder On the Orient Express", "Gone Girl", "Programming Skill For Data Science")
print(books)
#pull out the first 3 variable of the vector
top_three_books <- head(books, 3)
print(top_three_books)
#add the new ending to all variable in the vector
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#create a function that removes variable in the vector depending on the index number
remove_book <- function (title, index){
return(title[-index])
}
#remove the variable number 4 from the vector
books_without_four <- remove_book(books, 4)
print(books_without_four)
#create a varaible that stores only variables from books that has string longer than 15
long_titles <- books[ str_length(books) > 15]
print (long_titles)
#################
#### PART 3 #####
#################
#create the mean of the squared numbers
numbers <- seq(1, 201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
#create the median of the squared numbers
squared_median <- median(squared_numbers)
print(squared_median)
#print out the number that is squares
squares <- (sqrt(numbers) == round(sqrt(numbers)))
print(numbers[squares])
#################
#### PART 4 #####
#################
#set up a sprinbreak date and today's date
spring_break <- as.Date("2019-03-16")
today <- Sys.Date()
#caluculate how many days left till spring break
days_to_break <- spring_break - today
print(days_to_break)
#create a list that contains birthday of four people, as well as tagging the dates with their names
birthdays <- list(Monchai = as.Date("11/15/60", "%m/%d/%Y"), Suchinda = as.Date("02/13/62", "%m/%d/%Y"), Great = as.Date("01/02/99", "%m/%d/%Y"), Good = as.Date("01/12/04", "%m/%d/%Y"))
#takes one variable from the list and format it into %m/%d style date
parent_bday <- format(birthdays[[1]], "%m/%d")
print(parent_bday)
#create a new list that contains all birthdays but with the year of 2019
birthdays_2019 <- lapply(birthdays, format, "%m/%d/%2019")
print(birthdays_2019)
#function that detects whether the date has already pass from today by using the today variable
date_has_passed <- function (date){
return ((date - today) > 0)
}
make_birthday_announcement <- function (name, date){
if (date_has_passed(date)){
inputDate <- today - date + 365
}else{
inputDate <- today - date
}
output1 <- paste(name, "'s birthday is in ")
output2 <- paste(inputDate, " days.")
return(paste(output1, output2))
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), lapply(birthdays_2019, as.Date, "%m/%d/%2019"))
print (bday_announcements)
#################
#### PART 1 #####
#################
my_age <- 20
my_name <- "Chaichinda Siritantitam"
#this function will take in parameters and put it in between sentences
make_introduction <- function (name, age){
(output1 <- paste("Hello, my name is ", " and I'm ", sep = name))
(output2 <- paste(age, " years old."))
return (finalOutput <- paste(output1, output2))
}
#set my_intro variable to use the function
my_intro <- make_introduction (my_name, my_age)
print (my_intro)
#subtitude another title with the original title in my_intro
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- toupper(my_intro)
#count how many e are there in the string
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
#create a vector of my favourite books
books <- c("Harry Potter", "The LOTR", "And then there were none", "Murder On the Orient Express", "Gone Girl", "Programming Skill For Data Science")
print(books)
#pull out the first 3 variable of the vector
top_three_books <- head(books, 3)
print(top_three_books)
#add the new ending to all variable in the vector
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#create a function that removes variable in the vector depending on the index number
remove_book <- function (title, index){
return(title[-index])
}
#remove the variable number 4 from the vector
books_without_four <- remove_book(books, 4)
print(books_without_four)
#create a varaible that stores only variables from books that has string longer than 15
long_titles <- books[ str_length(books) > 15]
print (long_titles)
#################
#### PART 3 #####
#################
#create the mean of the squared numbers
numbers <- seq(1, 201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
#create the median of the squared numbers
squared_median <- median(squared_numbers)
print(squared_median)
#print out the number that is squares
squares <- (sqrt(numbers) == round(sqrt(numbers)))
print(numbers[squares])
#################
#### PART 4 #####
#################
#set up a sprinbreak date and today's date
spring_break <- as.Date("2019-03-16")
today <- Sys.Date()
#caluculate how many days left till spring break
days_to_break <- spring_break - today
print(days_to_break)
#create a list that contains birthday of four people, as well as tagging the dates with their names
birthdays <- list(Monchai = as.Date("11/15/60", "%m/%d/%Y"), Suchinda = as.Date("02/13/62", "%m/%d/%Y"), Great = as.Date("01/02/99", "%m/%d/%Y"), Good = as.Date("01/12/04", "%m/%d/%Y"))
#takes one variable from the list and format it into %m/%d style date
parent_bday <- format(birthdays[[1]], "%m/%d")
print(parent_bday)
#create a new list that contains all birthdays but with the year of 2019
birthdays_2019 <- lapply(birthdays, format, "%m/%d/%2019")
print(birthdays_2019)
#function that detects whether the date has already pass from today by using the today variable
date_has_passed <- function (date){
return ((date - today) > 0)
}
make_birthday_announcement <- function (name, date){
if (date_has_passed(date)){
inputDate <- today - date + 365
}else{
inputDate <- today - date
}
output1 <- paste(name, "'s birthday is in ")
output2 <- paste(inputDate, " days.")
return(paste(output1, output2))
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), lapply(birthdays_2019, as.Date, "%m/%d/%Y"))
print (bday_announcements)
#################
#### PART 1 #####
#################
my_age <- 20
my_name <- "Chaichinda Siritantitam"
#this function will take in parameters and put it in between sentences
make_introduction <- function (name, age){
(output1 <- paste("Hello, my name is ", " and I'm ", sep = name))
(output2 <- paste(age, " years old."))
return (finalOutput <- paste(output1, output2))
}
#set my_intro variable to use the function
my_intro <- make_introduction (my_name, my_age)
print (my_intro)
#subtitude another title with the original title in my_intro
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- toupper(my_intro)
#count how many e are there in the string
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
#create a vector of my favourite books
books <- c("Harry Potter", "The LOTR", "And then there were none", "Murder On the Orient Express", "Gone Girl", "Programming Skill For Data Science")
print(books)
#pull out the first 3 variable of the vector
top_three_books <- head(books, 3)
print(top_three_books)
#add the new ending to all variable in the vector
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#create a function that removes variable in the vector depending on the index number
remove_book <- function (title, index){
return(title[-index])
}
#remove the variable number 4 from the vector
books_without_four <- remove_book(books, 4)
print(books_without_four)
#create a varaible that stores only variables from books that has string longer than 15
long_titles <- books[ str_length(books) > 15]
print (long_titles)
#################
#### PART 3 #####
#################
#create the mean of the squared numbers
numbers <- seq(1, 201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
#create the median of the squared numbers
squared_median <- median(squared_numbers)
print(squared_median)
#print out the number that is squares
squares <- (sqrt(numbers) == round(sqrt(numbers)))
print(numbers[squares])
#################
#### PART 4 #####
#################
#set up a sprinbreak date and today's date
spring_break <- as.Date("2019-03-16")
today <- Sys.Date()
#caluculate how many days left till spring break
days_to_break <- spring_break - today
print(days_to_break)
#create a list that contains birthday of four people, as well as tagging the dates with their names
birthdays <- list(Monchai = as.Date("11/15/60", "%m/%d/%Y"), Suchinda = as.Date("02/13/62", "%m/%d/%Y"), Great = as.Date("01/02/99", "%m/%d/%Y"), Good = as.Date("01/12/04", "%m/%d/%Y"))
#takes one variable from the list and format it into %m/%d style date
parent_bday <- format(birthdays[[1]], "%m/%d")
print(parent_bday)
#create a new list that contains all birthdays but with the year of 2019
birthdays_2019 <- lapply(birthdays, format, "%m/%d/%2019")
print(birthdays_2019)
#function that detects whether the date has already pass from today by using the today variable
date_has_passed <- function (date){
return ((date - today) < 0)
}
make_birthday_announcement <- function (name, date){
if (date_has_passed(date)){
inputDate <- today - date + 365
}else{
inputDate <- today - date
}
output1 <- paste(name, "'s birthday is in ")
output2 <- paste(inputDate, " days.")
return(paste(output1, output2))
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), lapply(birthdays_2019, as.Date, "%m/%d/%Y"))
print (bday_announcements)
#################
#### PART 1 #####
#################
my_age <- 20
my_name <- "Chaichinda Siritantitam"
#this function will take in parameters and put it in between sentences
make_introduction <- function (name, age){
(output1 <- paste("Hello, my name is ", " and I'm ", sep = name))
(output2 <- paste(age, " years old."))
return (finalOutput <- paste(output1, output2))
}
#set my_intro variable to use the function
my_intro <- make_introduction (my_name, my_age)
print (my_intro)
#subtitude another title with the original title in my_intro
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- toupper(my_intro)
#count how many e are there in the string
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
#create a vector of my favourite books
books <- c("Harry Potter", "The LOTR", "And then there were none", "Murder On the Orient Express", "Gone Girl", "Programming Skill For Data Science")
print(books)
#pull out the first 3 variable of the vector
top_three_books <- head(books, 3)
print(top_three_books)
#add the new ending to all variable in the vector
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#create a function that removes variable in the vector depending on the index number
remove_book <- function (title, index){
return(title[-index])
}
#remove the variable number 4 from the vector
books_without_four <- remove_book(books, 4)
print(books_without_four)
#create a varaible that stores only variables from books that has string longer than 15
long_titles <- books[ str_length(books) > 15]
print (long_titles)
#################
#### PART 3 #####
#################
#create the mean of the squared numbers
numbers <- seq(1, 201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
#create the median of the squared numbers
squared_median <- median(squared_numbers)
print(squared_median)
#print out the number that is squares
squares <- (sqrt(numbers) == round(sqrt(numbers)))
print(numbers[squares])
#################
#### PART 4 #####
#################
#set up a sprinbreak date and today's date
spring_break <- as.Date("2019-03-16")
today <- Sys.Date()
#caluculate how many days left till spring break
days_to_break <- spring_break - today
print(days_to_break)
#create a list that contains birthday of four people, as well as tagging the dates with their names
birthdays <- list(Monchai = as.Date("11/15/60", "%m/%d/%Y"), Suchinda = as.Date("02/13/62", "%m/%d/%Y"), Great = as.Date("01/02/99", "%m/%d/%Y"), Good = as.Date("01/12/04", "%m/%d/%Y"))
#takes one variable from the list and format it into %m/%d style date
parent_bday <- format(birthdays[[1]], "%m/%d")
print(parent_bday)
#create a new list that contains all birthdays but with the year of 2019
birthdays_2019 <- lapply(birthdays, format, "%m/%d/%2019")
print(birthdays_2019)
#function that detects whether the date has already pass from today by using the today variable
date_has_passed <- function (date){
return ((date - today) < 0)
}
make_birthday_announcement <- function (name, date){
if (date_has_passed(date)){
inputDate <- today - date + 365
}else{
inputDate <- date - today
}
output1 <- paste(name, "'s birthday is in ")
output2 <- paste(inputDate, " days.")
return(paste(output1, output2))
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), lapply(birthdays_2019, as.Date, "%m/%d/%Y"))
print (bday_announcements)
test <- 2
source('~/Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/a4-data-wrangling-chaics-1766964/assignment.R', echo=TRUE)
library("dplyr")
#################
#### PART 1 #####
#################
drinkingTable <- read.csv('data/any_drinking.csv', stringsAsFactors=FALSE)
#################
#### PART 2 #####
#################
# Your script for Part 2 goes here (and delete this comment!)
#################
#### PART 3 #####
#################
# Your script for Part 3 goes here (and delete this comment!)
#################
#### PART 4 #####
#################
# Your script for Part 4 goes here (and delete this comment!)
(jsonlite)
library(httr)
library(dplyr)
#sourcing my api key
source("apikeys.R")
WBI_Definition_and_Source_Df <- read.csv('data/WBI_Definition_and_Source.csv', stringsAsFactors=FALSE)
WBI_Forest_Area_Cleaned_Df <- read.csv('data/WBI_Forest_Area_Cleaned.csv', stringsAsFactors=FALSE)
library(dplyr)
WBI_Definition_and_Source_Df <- read.csv('data/WBI_Definition_and_Source.csv', stringsAsFactors=FALSE)
shiny::runApp('Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/info201-final')
runApp('Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/info201-final')
runApp('Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/info201-final')
runApp('Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/info201-final')
my_ui <- fluidPage(
titlePanel("abc"),
h4(strong("abc")),
#shows the widgets
sidebarLayout(
sidebarPanel(
selectInput(inputId = "element1",
label = strong("Please select the renewable energy source from below"),
choices = "biofuel..trillion.btu.",
choices = "fuel_ethanol..thousand.",
selected = "Arizona"
),
?choices
selectInput(inputId = "element2",
label = strong("Please select the non-renewable energy source from below"),
choices = "crude_oil..thousand.barrels.",
choices = "natural_gas..million.cubic.feet.",
selected = "Arizona"
)
),
#shows the result from the widgets in tabs
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel("Page 1",
plotOutput("plot1"),
# plotOutput("plot2"),
textOutput(outputId = "message1"))
)
)
)
)#my ui
runApp('Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/info201-final')
column_name <- biofuel..trillion.btu.
show_pie <- select(combined, State, column_name)
show_pie$input$column_name <- as.numeric(show_pie$column_name)
show_pie$input$column_name <- show_pie$column_name / sum(show_pie$column_name) * 100
show_pie <- show_pie %>%
mutate(division = ifelse(column_name <= 4, "Other states", show_pie$State)) %>%
filter(division != "Other states")
pie = ggplot(show_pie, aes(x = "", y = column_name, fill = division)) +
geom_bar(stat = "identity", width = 1)
pie = pie + coord_polar("y", start = 0)
pie = pie + scale_fill_manual(values = c("#e00808", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#55ADE0", "#999999", "#cb3cd8"))
pie = pie + geom_text(aes(label = paste0(round(column_name), "%")), position = position_stack(vjust = 0.5))
pie
#column_name <- input$element1[1]
column_name <- biofuel..trillion.btu.
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$input$column_name <- as.numeric(show_pie$column_name)
show_pie$input$column_name <- show_pie$column_name / sum(show_pie$column_name) * 100
show_pie <- show_pie %>%
mutate(division = ifelse(column_name <= 4, "Other states", show_pie$State)) %>%
filter(division != "Other states")
pie = ggplot(show_pie, aes(x = "", y = column_name, fill = division)) +
geom_bar(stat = "identity", width = 1)
pie = pie + coord_polar("y", start = 0)
pie = pie + scale_fill_manual(values = c("#e00808", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#55ADE0", "#999999", "#cb3cd8"))
pie = pie + geom_text(aes(label = paste0(round(column_name), "%")), position = position_stack(vjust = 0.5))
pie
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$column_name <- as.numeric(show_pie$column_name)
show_pie$column_name <- show_pie$column_name / sum(show_pie$column_name) * 100
show_pie <- show_pie %>%
mutate(division = ifelse(column_name <= 4, "Other states", show_pie$State)) %>%
filter(division != "Other states")
pie = ggplot(show_pie, aes(x = "", y = column_name, fill = division)) +
geom_bar(stat = "identity", width = 1)
pie = pie + coord_polar("y", start = 0)
pie = pie + scale_fill_manual(values = c("#e00808", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#55ADE0", "#999999", "#cb3cd8"))
pie = pie + geom_text(aes(label = paste0(round(show_pie$column_name), "%")), position = position_stack(vjust = 0.5))
pie
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$column_name <- as.numeric(show_pie$column_name)
show_pie$column_name <- show_pie$column_name / sum(show_pie$column_name) * 100
show_pie <- show_pie %>%
mutate(division = ifelse(column_name <= 4, "Other states", show_pie$State)) %>%
filter(division != "Other states")
pie = ggplot(show_pie, aes(x = "", y = column_name, fill = division)) +
geom_bar(stat = "identity", width = 1)
pie = pie + coord_polar("y", start = 0)
pie = pie + scale_fill_manual(values = c("#e00808", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#55ADE0", "#999999", "#cb3cd8"))
pie = pie + geom_text(aes(label = paste0(show_pie$column_name, "%")), position = position_stack(vjust = 0.5))
pie
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
View(show_pie)
show_pie$column_name <- as.numeric(show_pie$column_name)
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$column_name <- as.numeric(show_pie$column_name)
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$biofuel..trillion.btu. <- as.numeric(show_pie$column_name)
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie <- as.numeric(show_pie$column_name)
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$biofuel..trillion.btu. <- as.numeric()
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$column_name <- show_pie$column_name / sum(show_pie$column_name) * 100
setwd("~/Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/info201-final")
