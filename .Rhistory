<<<<<<< HEAD
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), lapply(as.Date(),(birthdays_2019)))
print (bday_announcements)
#################
#### PART 1 #####
#################
my_age <- 20
my_name <- "Chaichinda Siritantitam"
#this function will take in parameters and put it in between sentences
make_introduction <- function (name, age){
(output1 <- paste("Hello, my name is ", " and I'm ", sep = name))
(output2 <- paste(age, " years old."))
return (finalOutput <- paste(output1, output2))
}
#set my_intro variable to use the function
my_intro <- make_introduction (my_name, my_age)
print (my_intro)
#subtitude another title with the original title in my_intro
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- toupper(my_intro)
#count how many e are there in the string
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
#create a vector of my favourite books
books <- c("Harry Potter", "The LOTR", "And then there were none", "Murder On the Orient Express", "Gone Girl", "Programming Skill For Data Science")
print(books)
#pull out the first 3 variable of the vector
top_three_books <- head(books, 3)
print(top_three_books)
#add the new ending to all variable in the vector
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#create a function that removes variable in the vector depending on the index number
remove_book <- function (title, index){
return(title[-index])
}
#remove the variable number 4 from the vector
books_without_four <- remove_book(books, 4)
print(books_without_four)
#create a varaible that stores only variables from books that has string longer than 15
long_titles <- books[ str_length(books) > 15]
print (long_titles)
#################
#### PART 3 #####
#################
#create the mean of the squared numbers
numbers <- seq(1, 201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
#create the median of the squared numbers
squared_median <- median(squared_numbers)
print(squared_median)
#print out the number that is squares
squares <- (sqrt(numbers) == round(sqrt(numbers)))
print(numbers[squares])
#################
#### PART 4 #####
#################
#set up a sprinbreak date and today's date
spring_break <- as.Date("2019-03-16")
today <- Sys.Date()
#caluculate how many days left till spring break
days_to_break <- spring_break - today
print(days_to_break)
#create a list that contains birthday of four people, as well as tagging the dates with their names
birthdays <- list(Monchai = as.Date("11/15/60", "%m/%d/%Y"), Suchinda = as.Date("02/13/62", "%m/%d/%Y"), Great = as.Date("01/02/99", "%m/%d/%Y"), Good = as.Date("01/12/04", "%m/%d/%Y"))
#takes one variable from the list and format it into %m/%d style date
parent_bday <- format(birthdays[[1]], "%m/%d")
print(parent_bday)
#create a new list that contains all birthdays but with the year of 2019
birthdays_2019 <- lapply(birthdays, format, "%m/%d/%2019")
print(birthdays_2019)
#function that detects whether the date has already pass from today by using the today variable
date_has_passed <- function (date){
return ((date - today) > 0)
}
make_birthday_announcement <- function (name, date){
if (date_has_passed(date)){
inputDate <- today - date + 365
}else{
inputDate <- today - date
}
output1 <- paste(name, "'s birthday is in ")
output2 <- paste(inputDate, " days.")
return(paste(output1, output2))
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), lapply(birthdays_2019, as.Date, "%m/%d/%2019"))
print (bday_announcements)
#################
#### PART 1 #####
#################
my_age <- 20
my_name <- "Chaichinda Siritantitam"
#this function will take in parameters and put it in between sentences
make_introduction <- function (name, age){
(output1 <- paste("Hello, my name is ", " and I'm ", sep = name))
(output2 <- paste(age, " years old."))
return (finalOutput <- paste(output1, output2))
}
#set my_intro variable to use the function
my_intro <- make_introduction (my_name, my_age)
print (my_intro)
#subtitude another title with the original title in my_intro
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- toupper(my_intro)
#count how many e are there in the string
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
#create a vector of my favourite books
books <- c("Harry Potter", "The LOTR", "And then there were none", "Murder On the Orient Express", "Gone Girl", "Programming Skill For Data Science")
print(books)
#pull out the first 3 variable of the vector
top_three_books <- head(books, 3)
print(top_three_books)
#add the new ending to all variable in the vector
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#create a function that removes variable in the vector depending on the index number
remove_book <- function (title, index){
return(title[-index])
}
#remove the variable number 4 from the vector
books_without_four <- remove_book(books, 4)
print(books_without_four)
#create a varaible that stores only variables from books that has string longer than 15
long_titles <- books[ str_length(books) > 15]
print (long_titles)
#################
#### PART 3 #####
#################
#create the mean of the squared numbers
numbers <- seq(1, 201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
#create the median of the squared numbers
squared_median <- median(squared_numbers)
print(squared_median)
#print out the number that is squares
squares <- (sqrt(numbers) == round(sqrt(numbers)))
print(numbers[squares])
#################
#### PART 4 #####
#################
#set up a sprinbreak date and today's date
spring_break <- as.Date("2019-03-16")
today <- Sys.Date()
#caluculate how many days left till spring break
days_to_break <- spring_break - today
print(days_to_break)
#create a list that contains birthday of four people, as well as tagging the dates with their names
birthdays <- list(Monchai = as.Date("11/15/60", "%m/%d/%Y"), Suchinda = as.Date("02/13/62", "%m/%d/%Y"), Great = as.Date("01/02/99", "%m/%d/%Y"), Good = as.Date("01/12/04", "%m/%d/%Y"))
#takes one variable from the list and format it into %m/%d style date
parent_bday <- format(birthdays[[1]], "%m/%d")
print(parent_bday)
#create a new list that contains all birthdays but with the year of 2019
birthdays_2019 <- lapply(birthdays, format, "%m/%d/%2019")
print(birthdays_2019)
#function that detects whether the date has already pass from today by using the today variable
date_has_passed <- function (date){
return ((date - today) > 0)
}
make_birthday_announcement <- function (name, date){
if (date_has_passed(date)){
inputDate <- today - date + 365
}else{
inputDate <- today - date
}
output1 <- paste(name, "'s birthday is in ")
output2 <- paste(inputDate, " days.")
return(paste(output1, output2))
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), lapply(birthdays_2019, as.Date, "%m/%d/%Y"))
print (bday_announcements)
#################
#### PART 1 #####
#################
my_age <- 20
my_name <- "Chaichinda Siritantitam"
#this function will take in parameters and put it in between sentences
make_introduction <- function (name, age){
(output1 <- paste("Hello, my name is ", " and I'm ", sep = name))
(output2 <- paste(age, " years old."))
return (finalOutput <- paste(output1, output2))
}
#set my_intro variable to use the function
my_intro <- make_introduction (my_name, my_age)
print (my_intro)
#subtitude another title with the original title in my_intro
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- toupper(my_intro)
#count how many e are there in the string
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
#create a vector of my favourite books
books <- c("Harry Potter", "The LOTR", "And then there were none", "Murder On the Orient Express", "Gone Girl", "Programming Skill For Data Science")
print(books)
#pull out the first 3 variable of the vector
top_three_books <- head(books, 3)
print(top_three_books)
#add the new ending to all variable in the vector
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#create a function that removes variable in the vector depending on the index number
remove_book <- function (title, index){
return(title[-index])
}
#remove the variable number 4 from the vector
books_without_four <- remove_book(books, 4)
print(books_without_four)
#create a varaible that stores only variables from books that has string longer than 15
long_titles <- books[ str_length(books) > 15]
print (long_titles)
#################
#### PART 3 #####
#################
#create the mean of the squared numbers
numbers <- seq(1, 201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
#create the median of the squared numbers
squared_median <- median(squared_numbers)
print(squared_median)
#print out the number that is squares
squares <- (sqrt(numbers) == round(sqrt(numbers)))
print(numbers[squares])
#################
#### PART 4 #####
#################
#set up a sprinbreak date and today's date
spring_break <- as.Date("2019-03-16")
today <- Sys.Date()
#caluculate how many days left till spring break
days_to_break <- spring_break - today
print(days_to_break)
#create a list that contains birthday of four people, as well as tagging the dates with their names
birthdays <- list(Monchai = as.Date("11/15/60", "%m/%d/%Y"), Suchinda = as.Date("02/13/62", "%m/%d/%Y"), Great = as.Date("01/02/99", "%m/%d/%Y"), Good = as.Date("01/12/04", "%m/%d/%Y"))
#takes one variable from the list and format it into %m/%d style date
parent_bday <- format(birthdays[[1]], "%m/%d")
print(parent_bday)
#create a new list that contains all birthdays but with the year of 2019
birthdays_2019 <- lapply(birthdays, format, "%m/%d/%2019")
print(birthdays_2019)
#function that detects whether the date has already pass from today by using the today variable
date_has_passed <- function (date){
return ((date - today) < 0)
}
make_birthday_announcement <- function (name, date){
if (date_has_passed(date)){
inputDate <- today - date + 365
}else{
inputDate <- today - date
}
output1 <- paste(name, "'s birthday is in ")
output2 <- paste(inputDate, " days.")
return(paste(output1, output2))
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), lapply(birthdays_2019, as.Date, "%m/%d/%Y"))
print (bday_announcements)
#################
#### PART 1 #####
#################
my_age <- 20
my_name <- "Chaichinda Siritantitam"
#this function will take in parameters and put it in between sentences
make_introduction <- function (name, age){
(output1 <- paste("Hello, my name is ", " and I'm ", sep = name))
(output2 <- paste(age, " years old."))
return (finalOutput <- paste(output1, output2))
}
#set my_intro variable to use the function
my_intro <- make_introduction (my_name, my_age)
print (my_intro)
#subtitude another title with the original title in my_intro
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- toupper(my_intro)
#count how many e are there in the string
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
#create a vector of my favourite books
books <- c("Harry Potter", "The LOTR", "And then there were none", "Murder On the Orient Express", "Gone Girl", "Programming Skill For Data Science")
print(books)
#pull out the first 3 variable of the vector
top_three_books <- head(books, 3)
print(top_three_books)
#add the new ending to all variable in the vector
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#create a function that removes variable in the vector depending on the index number
remove_book <- function (title, index){
return(title[-index])
}
#remove the variable number 4 from the vector
books_without_four <- remove_book(books, 4)
print(books_without_four)
#create a varaible that stores only variables from books that has string longer than 15
long_titles <- books[ str_length(books) > 15]
print (long_titles)
#################
#### PART 3 #####
#################
#create the mean of the squared numbers
numbers <- seq(1, 201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
#create the median of the squared numbers
squared_median <- median(squared_numbers)
print(squared_median)
#print out the number that is squares
squares <- (sqrt(numbers) == round(sqrt(numbers)))
print(numbers[squares])
#################
#### PART 4 #####
#################
#set up a sprinbreak date and today's date
spring_break <- as.Date("2019-03-16")
today <- Sys.Date()
#caluculate how many days left till spring break
days_to_break <- spring_break - today
print(days_to_break)
#create a list that contains birthday of four people, as well as tagging the dates with their names
birthdays <- list(Monchai = as.Date("11/15/60", "%m/%d/%Y"), Suchinda = as.Date("02/13/62", "%m/%d/%Y"), Great = as.Date("01/02/99", "%m/%d/%Y"), Good = as.Date("01/12/04", "%m/%d/%Y"))
#takes one variable from the list and format it into %m/%d style date
parent_bday <- format(birthdays[[1]], "%m/%d")
print(parent_bday)
#create a new list that contains all birthdays but with the year of 2019
birthdays_2019 <- lapply(birthdays, format, "%m/%d/%2019")
print(birthdays_2019)
#function that detects whether the date has already pass from today by using the today variable
date_has_passed <- function (date){
return ((date - today) < 0)
}
make_birthday_announcement <- function (name, date){
if (date_has_passed(date)){
inputDate <- today - date + 365
}else{
inputDate <- date - today
}
output1 <- paste(name, "'s birthday is in ")
output2 <- paste(inputDate, " days.")
return(paste(output1, output2))
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), lapply(birthdays_2019, as.Date, "%m/%d/%Y"))
print (bday_announcements)
test <- 2
source('~/Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/a4-data-wrangling-chaics-1766964/assignment.R', echo=TRUE)
library("dplyr")
#################
#### PART 1 #####
#################
drinkingTable <- read.csv('data/any_drinking.csv', stringsAsFactors=FALSE)
#################
#### PART 2 #####
#################
# Your script for Part 2 goes here (and delete this comment!)
#################
#### PART 3 #####
#################
# Your script for Part 3 goes here (and delete this comment!)
#################
#### PART 4 #####
#################
# Your script for Part 4 goes here (and delete this comment!)
(jsonlite)
library(httr)
library(dplyr)
#sourcing my api key
source("apikeys.R")
WBI_Definition_and_Source_Df <- read.csv('data/WBI_Definition_and_Source.csv', stringsAsFactors=FALSE)
WBI_Forest_Area_Cleaned_Df <- read.csv('data/WBI_Forest_Area_Cleaned.csv', stringsAsFactors=FALSE)
library(dplyr)
WBI_Definition_and_Source_Df <- read.csv('data/WBI_Definition_and_Source.csv', stringsAsFactors=FALSE)
shiny::runApp('Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/info201-final')
runApp('Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/info201-final')
runApp('Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/info201-final')
runApp('Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/info201-final')
my_ui <- fluidPage(
titlePanel("abc"),
h4(strong("abc")),
#shows the widgets
sidebarLayout(
sidebarPanel(
selectInput(inputId = "element1",
label = strong("Please select the renewable energy source from below"),
choices = "biofuel..trillion.btu.",
choices = "fuel_ethanol..thousand.",
selected = "Arizona"
),
?choices
selectInput(inputId = "element2",
label = strong("Please select the non-renewable energy source from below"),
choices = "crude_oil..thousand.barrels.",
choices = "natural_gas..million.cubic.feet.",
selected = "Arizona"
)
),
#shows the result from the widgets in tabs
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel("Page 1",
plotOutput("plot1"),
# plotOutput("plot2"),
textOutput(outputId = "message1"))
)
)
)
)#my ui
runApp('Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/info201-final')
column_name <- biofuel..trillion.btu.
show_pie <- select(combined, State, column_name)
show_pie$input$column_name <- as.numeric(show_pie$column_name)
show_pie$input$column_name <- show_pie$column_name / sum(show_pie$column_name) * 100
show_pie <- show_pie %>%
mutate(division = ifelse(column_name <= 4, "Other states", show_pie$State)) %>%
filter(division != "Other states")
pie = ggplot(show_pie, aes(x = "", y = column_name, fill = division)) +
geom_bar(stat = "identity", width = 1)
pie = pie + coord_polar("y", start = 0)
pie = pie + scale_fill_manual(values = c("#e00808", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#55ADE0", "#999999", "#cb3cd8"))
pie = pie + geom_text(aes(label = paste0(round(column_name), "%")), position = position_stack(vjust = 0.5))
pie
#column_name <- input$element1[1]
column_name <- biofuel..trillion.btu.
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$input$column_name <- as.numeric(show_pie$column_name)
show_pie$input$column_name <- show_pie$column_name / sum(show_pie$column_name) * 100
show_pie <- show_pie %>%
mutate(division = ifelse(column_name <= 4, "Other states", show_pie$State)) %>%
filter(division != "Other states")
pie = ggplot(show_pie, aes(x = "", y = column_name, fill = division)) +
geom_bar(stat = "identity", width = 1)
pie = pie + coord_polar("y", start = 0)
pie = pie + scale_fill_manual(values = c("#e00808", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#55ADE0", "#999999", "#cb3cd8"))
pie = pie + geom_text(aes(label = paste0(round(column_name), "%")), position = position_stack(vjust = 0.5))
pie
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$column_name <- as.numeric(show_pie$column_name)
show_pie$column_name <- show_pie$column_name / sum(show_pie$column_name) * 100
show_pie <- show_pie %>%
mutate(division = ifelse(column_name <= 4, "Other states", show_pie$State)) %>%
filter(division != "Other states")
pie = ggplot(show_pie, aes(x = "", y = column_name, fill = division)) +
geom_bar(stat = "identity", width = 1)
pie = pie + coord_polar("y", start = 0)
pie = pie + scale_fill_manual(values = c("#e00808", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#55ADE0", "#999999", "#cb3cd8"))
pie = pie + geom_text(aes(label = paste0(round(show_pie$column_name), "%")), position = position_stack(vjust = 0.5))
pie
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$column_name <- as.numeric(show_pie$column_name)
show_pie$column_name <- show_pie$column_name / sum(show_pie$column_name) * 100
show_pie <- show_pie %>%
mutate(division = ifelse(column_name <= 4, "Other states", show_pie$State)) %>%
filter(division != "Other states")
pie = ggplot(show_pie, aes(x = "", y = column_name, fill = division)) +
geom_bar(stat = "identity", width = 1)
pie = pie + coord_polar("y", start = 0)
pie = pie + scale_fill_manual(values = c("#e00808", "#33658A", "#2F4858", "#F6AE2D", "#F26419", "#55ADE0", "#999999", "#cb3cd8"))
pie = pie + geom_text(aes(label = paste0(show_pie$column_name, "%")), position = position_stack(vjust = 0.5))
pie
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
View(show_pie)
show_pie$column_name <- as.numeric(show_pie$column_name)
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$column_name <- as.numeric(show_pie$column_name)
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$biofuel..trillion.btu. <- as.numeric(show_pie$column_name)
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie <- as.numeric(show_pie$column_name)
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$biofuel..trillion.btu. <- as.numeric()
#column_name <- input$element1[1]
column_name <- "biofuel..trillion.btu."
show_pie <- select(combined, State, column_name)
show_pie$column_name <- show_pie$column_name / sum(show_pie$column_name) * 100
setwd("~/Documents/UW 🇺🇸/Sophmore 👦🏼/Quarter ✌🏽/Info 201/info201-final")
=======
filter(area != "NA")
forest_wide$area <- round(as.numeric(format(forest_wide$area, scientific = F)), 0)
forest_wide <- spread(forest_wide,
key = Series.Name,
value = area
)
# Delete symbols of () and % in column names, replacing them with names including _
colnames(forest_wide)[4] <- "Agricultural_land_percentage"
colnames(forest_wide)[5] <- "Agricultural_land_sqaure_km"
colnames(forest_wide)[6] <- "Co2_emissions_kt"
colnames(forest_wide)[7] <- "Co2_emissions_metric_tons_per_capita"
colnames(forest_wide)[8] <- "Forest_area_percentage"
colnames(forest_wide)[9] <- "Forest_area_square_km"
colnames(forest_wide)[10] <- "GDP_2010_USD"
feature <- colnames(forest_wide)[4:10]
# Put two widget controls into ui, one dropdown box and one text input
my_ui <- fluidPage(
titlePanel("Forestation Level"),
selectInput(
inputId = "feature", label = "Feature of Interest",
choices = feature, selected = "Forest_area_percentage"
),
textInput(
inputId = "year", label = "Year of Interest (1992-2016)",
value = "1992"
),
dataTableOutput(outputId = "data_table"),
textOutput(outputId = "message"),
plotOutput(outputId = "plot"),
textOutput(outputId = "message2")
)
# Define my_server function, render outputs from it
my_server <- function(input, output) {
output$data_table <- renderDataTable({
filtered_forest <- forest_wide %>%
filter(year == input$year) %>%
select(Country.Name, year, input$feature)
filtered_forest
})
output$message <- renderText({
message_str <- paste(
"The table shows the ", input$feature,
"for ", input$year
)
message_str
})
output$plot <- renderPlot({
ggplot(data = forest_wide) +
geom_smooth(mapping = aes_string(x = input$feature, y = "Forest_area_percentage")) +
scale_x_log10()
})
output$message2 <- renderText({
message_str2 <- paste(
"The plot shows the relationship between Forest area (% of land area) and ",
input$feature, "in ", input$year
)
})
}
# Start running the application
shinyApp(my_ui, my_server)
my_server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = correct_colnames_numeric) +
geom_point(mapping = aes_string(
x = input$choice_x,
y = "CO2",
label = "correct_colnames_numeric$State")
)
})
}
shinyApp(ui = my_ui, server = my_server)
library("dplyr")
library("tidyr")
library("shiny")
library("ggplot2")
### references ###
# https://www.eia.gov/environment/emissions/state/analysis/
# https://www.eia.gov/state/seds/seds-data-complete.php?sid=US#Production
biofuel <- read.csv("data/biofuel.csv", stringsAsFactors = FALSE)
co2 <- read.csv("data/co2.csv", stringsAsFactors = FALSE)
co2_per_capita <- read.csv("data/co2_per_capita.csv", stringsAsFactors = FALSE)
crude_oil <- read.csv("data/crude_oil.csv", stringsAsFactors = FALSE)
fuel_ethanol <- read.csv("data/fuel_ethanol.csv", stringsAsFactors = FALSE)
natural_gas <- read.csv("data/natural_gas.csv", stringsAsFactors = FALSE)
# data wrangling
# Change all the state column names to "State"
state_colname <- function (data) {
colnames(data)[1] = "State"
return(data)
}
co2 <- state_colname(co2)
biofuel <- state_colname(biofuel)
co2_per_capita <- state_colname(co2_per_capita)
crude_oil <- state_colname(crude_oil)
fuel_ethanol <- state_colname(fuel_ethanol)
# Select only 2016 values
co2 <- select(co2, State, X2016)
colnames(co2) <- c("State", "co2")
# combine all of the csv files by State where they all have matching values
combined <- inner_join(biofuel, crude_oil, by = "State") %>%
inner_join(., fuel_ethanol, by = "State") %>%
inner_join(., natural_gas, by = "State") %>%
inner_join(., co2_per_capita, by = "State") %>%
inner_join(., co2, by = "State")
# remove all of the commas in number and change the values to be numeric
correct_colnames_numeric <- combined
colnames(correct_colnames_numeric) <- c("State", "BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas", "CO2_Per_Capita", "CO2")
correct_colnames_numeric$Crude_Oil <- gsub(",", "", correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$Crude_Oil<- as.numeric(correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$BioFuel <- as.numeric(correct_colnames_numeric$BioFuel)
correct_colnames_numeric$Fuel_Ethanol <- gsub(",", "", correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Fuel_Ethanol <- as.numeric(correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Natural_Gas <- gsub(",", "", correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$Natural_Gas <- as.numeric(correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$CO2_Per_Capita <- as.numeric(correct_colnames_numeric$CO2_Per_Capita)
correct_colnames_numeric$CO2 <- as.numeric(correct_colnames_numeric$CO2)
View(correct_colnames_numeric)
my_ui <- fluidPage(
#shows the widgets
sidebarLayout(
sidebarPanel(
selectInput(inputId = "choice_x",
label = "X Variable",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "Crude_Oil")
),
#shows the result from the widgets in tabs
mainPanel(
plotOutput(outputId = "plot")
)
)
)
my_server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = correct_colnames_numeric) +
geom_point(mapping = aes_string(
x = input$choice_x,
y = "CO2",
label = "correct_colnames_numeric$State")
)
})
}
shinyApp(ui = my_ui, server = my_server)
library("dplyr")
library("tidyr")
library("shiny")
library("ggplot2")
### references ###
# https://www.eia.gov/environment/emissions/state/analysis/
# https://www.eia.gov/state/seds/seds-data-complete.php?sid=US#Production
biofuel <- read.csv("data/biofuel.csv", stringsAsFactors = FALSE)
co2 <- read.csv("data/co2.csv", stringsAsFactors = FALSE)
co2_per_capita <- read.csv("data/co2_per_capita.csv", stringsAsFactors = FALSE)
crude_oil <- read.csv("data/crude_oil.csv", stringsAsFactors = FALSE)
fuel_ethanol <- read.csv("data/fuel_ethanol.csv", stringsAsFactors = FALSE)
natural_gas <- read.csv("data/natural_gas.csv", stringsAsFactors = FALSE)
# data wrangling
# Change all the state column names to "State"
state_colname <- function (data) {
colnames(data)[1] = "State"
return(data)
}
co2 <- state_colname(co2)
biofuel <- state_colname(biofuel)
co2_per_capita <- state_colname(co2_per_capita)
crude_oil <- state_colname(crude_oil)
fuel_ethanol <- state_colname(fuel_ethanol)
# Select only 2016 values
co2 <- select(co2, State, X2016)
colnames(co2) <- c("State", "co2")
# combine all of the csv files by State where they all have matching values
combined <- inner_join(biofuel, crude_oil, by = "State") %>%
inner_join(., fuel_ethanol, by = "State") %>%
inner_join(., natural_gas, by = "State") %>%
inner_join(., co2_per_capita, by = "State") %>%
inner_join(., co2, by = "State")
# remove all of the commas in number and change the values to be numeric
correct_colnames_numeric <- combined
colnames(correct_colnames_numeric) <- c("State", "BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas", "CO2_Per_Capita", "CO2")
correct_colnames_numeric$Crude_Oil <- gsub(",", "", correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$Crude_Oil<- as.numeric(correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$BioFuel <- as.numeric(correct_colnames_numeric$BioFuel)
correct_colnames_numeric$Fuel_Ethanol <- gsub(",", "", correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Fuel_Ethanol <- as.numeric(correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Natural_Gas <- gsub(",", "", correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$Natural_Gas <- as.numeric(correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$CO2_Per_Capita <- as.numeric(correct_colnames_numeric$CO2_Per_Capita)
correct_colnames_numeric$CO2 <- as.numeric(correct_colnames_numeric$CO2)
View(correct_colnames_numeric)
my_ui <- fluidPage(
#shows the widgets
sidebarLayout(
sidebarPanel(
selectInput(inputId = "choice_x",
label = "X Variable",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "Crude_Oil")
),
#shows the result from the widgets in tabs
mainPanel(
plotOutput(outputId = "plot")
)
)
)
my_server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = correct_colnames_numeric) +
geom_point(mapping = aes_string(
x = input$choice_x,
y = "CO2",
label = "correct_colnames_numeric$State")
)
})
}
shinyApp(ui = my_ui, server = my_server)
setwd("C:/Users/hp/Desktop/INFO 201/info201-final")
library("dplyr")
library("tidyr")
library("shiny")
library("ggplot2")
### references ###
# https://www.eia.gov/environment/emissions/state/analysis/
# https://www.eia.gov/state/seds/seds-data-complete.php?sid=US#Production
biofuel <- read.csv("data/biofuel.csv", stringsAsFactors = FALSE)
co2 <- read.csv("data/co2.csv", stringsAsFactors = FALSE)
co2_per_capita <- read.csv("data/co2_per_capita.csv", stringsAsFactors = FALSE)
crude_oil <- read.csv("data/crude_oil.csv", stringsAsFactors = FALSE)
fuel_ethanol <- read.csv("data/fuel_ethanol.csv", stringsAsFactors = FALSE)
natural_gas <- read.csv("data/natural_gas.csv", stringsAsFactors = FALSE)
# data wrangling
# Change all the state column names to "State"
state_colname <- function (data) {
colnames(data)[1] = "State"
return(data)
}
co2 <- state_colname(co2)
biofuel <- state_colname(biofuel)
co2_per_capita <- state_colname(co2_per_capita)
crude_oil <- state_colname(crude_oil)
fuel_ethanol <- state_colname(fuel_ethanol)
# Select only 2016 values
co2 <- select(co2, State, X2016)
colnames(co2) <- c("State", "co2")
# combine all of the csv files by State where they all have matching values
combined <- inner_join(biofuel, crude_oil, by = "State") %>%
inner_join(., fuel_ethanol, by = "State") %>%
inner_join(., natural_gas, by = "State") %>%
inner_join(., co2_per_capita, by = "State") %>%
inner_join(., co2, by = "State")
# remove all of the commas in number and change the values to be numeric
correct_colnames_numeric <- combined
colnames(correct_colnames_numeric) <- c("State", "BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas", "CO2_Per_Capita", "CO2")
correct_colnames_numeric$Crude_Oil <- gsub(",", "", correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$Crude_Oil<- as.numeric(correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$BioFuel <- as.numeric(correct_colnames_numeric$BioFuel)
correct_colnames_numeric$Fuel_Ethanol <- gsub(",", "", correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Fuel_Ethanol <- as.numeric(correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Natural_Gas <- gsub(",", "", correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$Natural_Gas <- as.numeric(correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$CO2_Per_Capita <- as.numeric(correct_colnames_numeric$CO2_Per_Capita)
correct_colnames_numeric$CO2 <- as.numeric(correct_colnames_numeric$CO2)
View(correct_colnames_numeric)
my_ui <- fluidPage(
#shows the widgets
sidebarLayout(
sidebarPanel(
selectInput(inputId = "choice_x",
label = "X Variable",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "Crude_Oil")
),
#shows the result from the widgets in tabs
mainPanel(
plotOutput(outputId = "plot")
)
)
)
my_server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = correct_colnames_numeric) +
geom_point(mapping = aes_string(
x = input$choice_x,
y = "CO2",
label = "correct_colnames_numeric$State")
)
})
}
shinyApp(ui = my_ui, server = my_server)
setwd("C:/Users/hp/Desktop/INFO 201/info201-final")
source("data_wrangling.R")
page_one <- tabPanel(
"Crude Oil",
p(strong("Defintion:"), "most common form of fossil fuel made of a mixture of hydrocarbons, found in underground reservoirs."),
p(strong("Units:"), "thousands of barrels ")
)
page_two <- tabPanel(
"Natural Gas",
p(strong("Defintion:"), "naturally occurring gas made of primarily of methane and other hydrocarbons, found in natural gas
deposits made from hydrocarbons being heated/pressurized into gas."),
p(strong("Units:"), "millions of cubic feet")
)
page_three <- tabPanel(
"Fuel Ethanol",
p(strong("Defintion:"), "a renewable fuel that is commonly domestically produced or fermented from agricultural waste,
grain or corn. Ethanol fuel is also produced in a chemical extraction from ethylene (via hydration)."),
p(strong("Units:"), "thousand barrels")
)
page_four <- tabPanel(
"Biofuel",
p(strong("Defintion:"), "a renewable fuel that is produced through contemporary biological processes, such as agriculture and anaerobic
digestion"),
p(strong("Units:"), "trillion btu")
)
page_five <- tabPanel(
"CO2",
p(strong("Defintion:"), "a colorless gas made with one carbon atom and two oxygen atoms."),
p(strong("Units:"), "million metric tons"),
p(strong("CO2 per capita:"), "metric tons of carbon dioxide per person.")
)
page_six <- tabPanel(
"Renewable",
p(strong("Renewable"), "energy is generally defined as energy that is collected from resources which are naturally replenished on a human timescale,
such as sunlight, wind, rain, tides, waves, and geothermal heat.")
)
page_seven <- tabPanel(
"Nonrenewable",
p("A ", strong("non-renewable"), " resource (also called a finite resource) is a resource that does not renew itself at a sufficient rate for sustainable
economic extraction in meaningful human time-frames. ")
)
my_ui <- fluidPage(
titlePanel("Energy Sources and CO2 in the United States"),
h5(strong("Our project is focused on the different production levels of energy sources in the United States.
These are used for energy in everyday life such as the gas for transportation and heating systems.
Some of these energy sources include crude oil, natural gas, biofuel, and ethanol. While these serve
similar purposes, they are different in their impacts on the environment. There are two main factors
that one should consider with these different options: cost and impact. For example, one key
difference is that crude oil releases a significant amount of carbon dioxide into the atmosphere.
Compared to natural gas, that is about 30% more carbon dioxide produced. The other is that crude oil
is considered cheaper than natural gas, giving reason to why most commercial cars are designed to use crude
oil. These two fuel options are better than burning coal but are still causes of significant air pollution and
are nonrenewable. We will also be examining renewable energy sources like biofuel and ethanol.  ")),
navbarPage(
"Definitions",
page_one,
page_two,
page_three,
page_four,
page_five,
page_six,
page_seven
),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "choice_x", label = "X Varaible",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "Crude_Oil"
),
selectInput(
inputId = "choice_y", label = "Y Variable",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "BioFuel"
),
radioButtons(inputId = "points_text", label = "Would you like to view points or see state names?",
choices = list("States" = 1, "Points" = 2),
selected = 1)
),
mainPanel(
plotOutput(outputId = "table2")
)
)
)
my_server <- function(input, output) {
# Question 1 table
output$table2 <- renderPlot({
ggplot(data = correct_colnames_numeric) +
if (input$points_text == 1) {
geom_label(mapping = aes_string(
x = input$choice_x, y = input$choice_y,
label = "correct_colnames_numeric$State"
))
} else {
geom_point(mapping = aes_string(
x = input$choice_x, y = input$choice_y
))
}
})
}
source("cam_ui.R")
shinyApp(ui = my_ui , server = my_server)
setwd("C:/Users/hp/Desktop/INFO 201/info201-final")
library("dplyr")
library("tidyr")
library("shiny")
library("ggplot2")
### references ###
# https://www.eia.gov/environment/emissions/state/analysis/
# https://www.eia.gov/state/seds/seds-data-complete.php?sid=US#Production
biofuel <- read.csv("data/biofuel.csv", stringsAsFactors = FALSE)
co2 <- read.csv("data/co2.csv", stringsAsFactors = FALSE)
co2_per_capita <- read.csv("data/co2_per_capita.csv", stringsAsFactors = FALSE)
crude_oil <- read.csv("data/crude_oil.csv", stringsAsFactors = FALSE)
fuel_ethanol <- read.csv("data/fuel_ethanol.csv", stringsAsFactors = FALSE)
natural_gas <- read.csv("data/natural_gas.csv", stringsAsFactors = FALSE)
# data wrangling
# Change all the state column names to "State"
state_colname <- function (data) {
colnames(data)[1] = "State"
return(data)
}
co2 <- state_colname(co2)
biofuel <- state_colname(biofuel)
co2_per_capita <- state_colname(co2_per_capita)
crude_oil <- state_colname(crude_oil)
fuel_ethanol <- state_colname(fuel_ethanol)
# Select only 2016 values
co2 <- select(co2, State, X2016)
colnames(co2) <- c("State", "co2")
# combine all of the csv files by State where they all have matching values
combined <- inner_join(biofuel, crude_oil, by = "State") %>%
inner_join(., fuel_ethanol, by = "State") %>%
inner_join(., natural_gas, by = "State") %>%
inner_join(., co2_per_capita, by = "State") %>%
inner_join(., co2, by = "State")
# remove all of the commas in number and change the values to be numeric
correct_colnames_numeric <- combined
colnames(correct_colnames_numeric) <- c("State", "BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas", "CO2_Per_Capita", "CO2")
correct_colnames_numeric$Crude_Oil <- gsub(",", "", correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$Crude_Oil<- as.numeric(correct_colnames_numeric$Crude_Oil)
correct_colnames_numeric$BioFuel <- as.numeric(correct_colnames_numeric$BioFuel)
correct_colnames_numeric$Fuel_Ethanol <- gsub(",", "", correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Fuel_Ethanol <- as.numeric(correct_colnames_numeric$Fuel_Ethanol)
correct_colnames_numeric$Natural_Gas <- gsub(",", "", correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$Natural_Gas <- as.numeric(correct_colnames_numeric$Natural_Gas)
correct_colnames_numeric$CO2_Per_Capita <- as.numeric(correct_colnames_numeric$CO2_Per_Capita)
correct_colnames_numeric$CO2 <- as.numeric(correct_colnames_numeric$CO2)
View(correct_colnames_numeric)
my_ui <- fluidPage(
#shows the widgets
sidebarLayout(
sidebarPanel(
selectInput(inputId = "choice_x",
label = "X Variable",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "Crude_Oil")
),
radioButtons(inputId = "points_text", label = "Would you like to view points or see state names?",
choices = list("States" = 1, "Points" = 2),
selected = 1)
),
#shows the result from the widgets in tabs
mainPanel(
plotOutput(outputId = "plot")
)
)
my_server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = correct_colnames_numeric) +
if (input$points_text == 1) {
geom_label(mapping = aes_string(
x = input$choice_x, y = "CO2",
label = "correct_colnames_numeric$State"
))
} else {
geom_point(mapping = aes_string(
x = input$choice_x, y = "CO2"
))
}
})
}
shinyApp(ui = my_ui, server = my_server)
my_ui <- fluidPage(
#shows the widgets
sidebarLayout(
sidebarPanel(
selectInput(inputId = "choice_x",
label = "X Variable",
choices = c("BioFuel", "Crude_Oil", "Fuel_Ethanol", "Natural_Gas"),
selected = "Crude_Oil")
),
radioButtons(inputId = "points_text", label = "Would you like to view points or see state names?",
choices = list("States" = 1, "Points" = 2),
selected = 1)
),
#shows the result from the widgets in tabs
mainPanel(
plotOutput(outputId = "plot"),
textOutput(outputId = "message")
)
)
my_server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = correct_colnames_numeric) +
if (input$points_text == 1) {
geom_label(mapping = aes_string(
x = input$choice_x, y = "CO2",
label = "correct_colnames_numeric$State"
))
} else {
geom_point(mapping = aes_string(
x = input$choice_x, y = "CO2"
))
}
})
output$message <- renderText({
message <- paste(
"The plot shows the relationship between CO2 emission and ",
input$choice_x, "of twenty states in 2016 "
)
})
}
shinyApp(ui = my_ui, server = my_server)
>>>>>>> 845c800576c07f421b8307784ef4709348326a61
